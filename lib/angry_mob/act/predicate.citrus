grammar Predicate

  rule predicate
    expression | primary
  end

  rule expression
    (p0:primary S binary_op S p1:primary) {
      def to_ruby
        "( #{p0.to_ruby} #{binary_op.text} #{p1.to_ruby} )"
      end
    }
  end

  rule primary
    (neg:'!'? exp:(event | expression_paren | expression)) {
      def to_ruby
        if neg.length > 0
          "! #{exp.to_ruby}"
        else
          exp.to_ruby
        end
      end
    }
  end


  rule expression_paren
    ('(' expression ')') {
      def to_ruby
        expression.to_ruby
      end
    }
  end

  rule event
    ([_a-zA-Z] [-a-zA-Z0-9_/]*) {
      def to_ruby
        "match_event?(new_event,'#{text}')"
      end
    }
  end

  rule uanry_op
    '!'
  end
  rule binary_op
    '&&' | '||'
  end

  rule and
    '&&'
  end

  rule or
    '||'
  end

  rule not
    '!'
  end

  rule s
    white*
  end

  rule S
    white+
  end
    
  rule white
    [ \t\n\r]
  end

  # Non-space char
  rule ns
    ![ ;,!})\n] .
  end

end

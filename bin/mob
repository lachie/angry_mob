#!/usr/bin/env ruby

require 'open-uri'
require 'pathname'
@root = Pathname(__FILE__).dirname.parent.expand_path

%w{json thor angry_hash citrus}.each do |lib|
  root = @root+'vendor'+lib
  $: << (root+'lib')
end

require 'thor'

$:.unshift @root+'lib'
require 'angry_mob'



class MobCLI < Thor

  default_task 'riot'

  attr_reader :config


  # main entry point
  desc 'riot', 'riot the mob'

  method_option :nodename         , :type => :string , :required => true
  method_option :json_file        , :type => :string , :required => true

  method_option :events           , :type => :array
  method_option :act              , :type => :string

  method_option :hooks            , :type => :string

  method_option :debug            , :type => :boolean, :default => false
  method_option :dry_run          , :type => :boolean, :default => false
  method_option :allow_missing_act, :type => :boolean, :default => false

  method_option :mobs             , :type => :array  , :default => []

  def riot
    begin
      # load config hooks
      load_hooks(config.hooks)

      @hooks.pre

      ui = AngryMob::UI.new(:debug => config.debug?)

      attributes = build_attributes

      @hooks.attrs( attributes )

      AngryMob::Rioter.ui = ui   # XXX not threadsafe, but what is?

      # create the mob loader
      mob_loader = AngryMob::MobLoader.new(attributes)
      
      config.mobs.each {|mob_path| mob_loader.add_mob(mob_path)}

      # resolve mobs and create the rioter
      rioter = mob_loader.to_rioter
      rioter.riot!( config.nodename, attributes )

    rescue
      $stdout.flush
      $stderr.flush

      puts "\nerror [#{$!.class}] #{$!}"
      $!.backtrace.each {|b| puts "  #{b}"}
      exit(1)
    end
  end


  desc "riot_file", "riot the mob, using a directive file as input"
  def riot_file(file)
    load_config_from_file(file)
    riot
  end


  desc 'match_events', 'match initial events against all predicates'

  method_option :json_file, :type => :string, :required => false
  method_option :events, :type => :string, :required => true
  method_option :mobs  , :type => :array , :default => []
  def match_events
    attributes = load_attributes
    events = attributes.fire = [ config.events.split(',') ].flatten.compact

    mob_loader = AngryMob::MobLoader.new(attributes)
    options.mobs.each {|mob_path| mob_loader.add_mob(mob_path)}

    rioter = mob_loader.to_rioter
    rioter.act_scheduler.acts.values.select {|act| events.any? {|e| act.match?(e)}}.map {|act| act.name}.tapp
  end



  desc 'predicates', 'print all predicates'

  method_option :json_file, :type => :string, :required => false
  method_option :mobs     , :type => :array , :default => []
  def predicates
    attributes = load_attributes

    mob_loader = AngryMob::MobLoader.new(attributes)
    options.mobs.each {|mob_path| mob_loader.add_mob(mob_path)}

    rioter = mob_loader.to_rioter
    cols = mob.act_scheduler.acts.values.sort_by {|act| act.predicate.on}.map {|act| [act.name,act.predicate.on,act.definition_file.to_s.strip]}

    widths = cols.inject([0,0,0]) {|memo,parts|
      memo[0] = [ memo[0], parts[0].size ].max
      memo[1] = [ memo[1], parts[1].size ].max
      memo[2] = [ memo[2], parts[2].size ].max
      memo
    }

    fmt = widths.map {|w| "%-#{w}s"} * ' '

    cols.each {|parts| puts fmt % parts}
  end


  no_tasks do
    def load_config_from_file( file )
      require 'json/pure'
      file = Pathname(file).expand_path
      root = file.dirname

      @config = AngryHash[ JSON.parse( file.read ) ]

      @config.json_file =  File.expand_path @config.json_file, root
      @config.mobs.map! {|mob| File.expand_path mob, root}
    end


    def expand_config_path( root, key )
      @config[key] = File.expand_path( @config[key], root )
    end


    def config
      @config ||= AngryHash[ options ]
    end


    def attribute_load_options
      @attribute_load_options ||= {}
    end
  end


  protected
  def build_attributes
    attributes = load_attributes

    attributes.fire = [ config.act, config.events ].flatten.compact

    if config.allow_missing_act?
      attributes.raise_on_missing_act = false
    end

    attributes.dry_run = config.dry_run?

    attributes
  end


  def load_attributes
    return AngryHash.new unless config.json_file?

    if config.json_file.to_s[/^https?:/]
      require 'open-uri'
      require 'net/https'

      json = begin
        original_peer = OpenSSL::SSL::VERIFY_PEER
        OpenSSL::SSL.const_set('VERIFY_PEER', OpenSSL::SSL::VERIFY_NONE)

        open(config.json_file, attribute_load_options).read
      ensure
        OpenSSL::SSL.const_set('VERIFY_PEER', original_peer)
      end
    else
      json = Pathname(config.json_file.tapp("loading attributes from")).expand_path.read
    end

    require 'json/pure'
    attributes = JSON.parse( json )

    AngryHash[attributes || {}]
  end


  def load_hooks(file)
    @hooks = MobHooks.new( self, file )
  end

end




class MobHooks
  attr_reader :cli
  def initialize(cli,file=nil)
    @cli = cli
    if file
      @building = true
      instance_eval( Pathname(file).read )
      @building = false
    end
  end

  def pre(&block)
    if building?
      pre_blocks << block
    else
      pre_blocks.each {|b| b.call}
    end
  end

  def attrs( *args, &block )
    if building?
      attr_blocks << block
    else
      attr_blocks.each {|b| b.call(*args)}
    end
  end

  protected

  def building?; @building end
  def pre_blocks ; @pre_blocks ||= [] end
  def attr_blocks; @attr_blocks ||= [] end
end




MobCLI.start

#!/usr/bin/env ruby

require 'pathname'
@root = Pathname(__FILE__).dirname.parent.expand_path

%w{json thor angry_hash}.each do |lib|
  root = @root+'vendor'+lib
  $: << (root+'lib')
end

require 'thor'

$:.unshift @root+'lib'
require 'angry_mob'

class MobCLI < Thor

  default_task 'riot'
  desc 'riot', 'riot the mob'
  method_option :nodename, :type => :string, :required => true
  method_option :json_file, :type => :string, :required => true
  method_option :act, :type => :string, :required => true

  method_option :debug            , :type => :boolean, :default => false
  method_option :dry_run          , :type => :boolean, :default => false
  method_option :allow_missing_act, :type => :boolean, :default => false

  method_option :mobs, :type => :array, :default => []

  def riot
    ui = AngryMob::UI.new(:debug => options.debug?)

    attributes = build_attributes

    begin

      # XXX not threadsafe, but what is?
      AngryMob::Mob.ui = ui
      mob_loader = AngryMob::MobLoader.new
      
      options.mobs.each {|mob_path| mob_loader.add_mob(mob_path)}

      mob = mob_loader.to_mob
      mob.riot!( nodename, attributes )

    rescue
      puts "\nerror [#{$!.class}] #{$!}"
      $!.backtrace.each {|b| puts "  #{b}"}
      exit(1)
    end
  end

  protected
  def build_attributes
    attributes = load_attributes

    attributes.acts = [ options.act ]

    if options.allow_missing_act?
      attributes.raise_on_missing_act = false
    end

    attributes.dry_run = ARGV.dry_run?

    attributes
  end

  def load_attributes
    return AngryHash.new unless options.json_file?
    
    if options.json_file[/^https?:/]
      require 'net/http'
      json = Net::HTTP.get(options.json_file)
    else
      json = options.json_file.pathname.expand_path.read
    end

    require 'json/pure'
    attributes = JSON.parse( json )

    AngryHash[attributes || {}]
  end    

end

MobCLI.start
